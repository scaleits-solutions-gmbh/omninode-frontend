name: Publish Package

on:
  push:
    branches:
      - '**'  # All branches
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@scaleits-solutions-gmbh'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run tests
        run: pnpm type-check && pnpm lint

  publish:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@scaleits-solutions-gmbh'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Configure npm registry
        run: |
          cat > .npmrc << EOF
          @scaleits-solutions-gmbh:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          always-auth=true
          EOF
        
      - name: Install dependencies
        run: pnpm install

      - name: Build package
        run: pnpm build

      - name: Verify build artifacts
        run: |
          test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
          test -f dist/index.mjs || (echo "Missing dist/index.mjs" && exit 1)
          test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)
          echo "✅ All build artifacts verified"

      - name: Check for manual version changes (Beta only)
        if: github.ref == 'refs/heads/beta'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the version from the previous commit
          git show HEAD~1:package.json > previous_package.json 2>/dev/null || echo '{"version":"0.0.0"}' > previous_package.json
          PREVIOUS_VERSION=$(node -p "require('./previous_package.json').version")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Check if version was manually changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Manual version change detected: $PREVIOUS_VERSION → $CURRENT_VERSION"
            echo "MANUAL_VERSION_CHANGE=true" >> $GITHUB_ENV
            echo "SHOULD_BUMP_PATCH=false" >> $GITHUB_ENV
          else
            echo "No manual version change detected, will auto-bump patch"
            echo "MANUAL_VERSION_CHANGE=false" >> $GITHUB_ENV
            echo "SHOULD_BUMP_PATCH=true" >> $GITHUB_ENV
          fi
          
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          rm -f previous_package.json

      - name: Auto-bump patch version (Beta only)
        if: github.ref == 'refs/heads/beta' && env.SHOULD_BUMP_PATCH == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Bump patch version
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Bumped version to: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit the version bump
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          # Push back to beta branch
          git push origin beta

      - name: Set version for publishing (Beta)
        if: github.ref == 'refs/heads/beta'
        run: |
          if [ "$SHOULD_BUMP_PATCH" = "true" ]; then
            VERSION_FOR_PUBLISHING=$NEW_VERSION
          else
            VERSION_FOR_PUBLISHING=$CURRENT_VERSION
          fi
          
          # Generate beta version without timestamp
          BETA_VERSION="${VERSION_FOR_PUBLISHING}-beta"
          
          echo "Generated beta version: $BETA_VERSION"
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_ENV

      - name: Set version for publishing (Feature branches)
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/beta' && !startsWith(github.ref, 'refs/tags/')
        run: |
          # Get current version and branch name
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9]/-/g')
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Generate feature version with branch name and timestamp
          FEAT_VERSION="${CURRENT_VERSION}-feat.${BRANCH_NAME}.${TIMESTAMP}"
          
          echo "Generated feature version: $FEAT_VERSION"
          echo "FEAT_VERSION=$FEAT_VERSION" >> $GITHUB_ENV
        
      - name: Publish to GitHub Packages (Main)
        if: github.ref == 'refs/heads/main'
        run: |
          npm whoami --registry=https://npm.pkg.github.com
          npm publish --tag latest --registry=https://npm.pkg.github.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to GitHub Packages (Beta)
        if: github.ref == 'refs/heads/beta'
        run: |
          npm whoami --registry=https://npm.pkg.github.com
          
          # Temporarily update package.json version for publishing only
          ORIGINAL_VERSION=$(node -p "require('./package.json').version")
          npm version $BETA_VERSION --no-git-tag-version
          npm publish --tag beta --registry=https://npm.pkg.github.com
          
          # Restore original version
          npm version $ORIGINAL_VERSION --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages (Feature branches)
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/beta' && !startsWith(github.ref, 'refs/tags/')
        run: |
          npm whoami --registry=https://npm.pkg.github.com
          
          # Temporarily update package.json version for publishing only
          ORIGINAL_VERSION=$(node -p "require('./package.json').version")
          npm version $FEAT_VERSION --no-git-tag-version
          npm publish --tag feat --registry=https://npm.pkg.github.com
          
          # Restore original version
          npm version $ORIGINAL_VERSION --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 